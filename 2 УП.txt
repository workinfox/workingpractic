2.1

using System;
namespace Listwithrandomnumbers
{
    class Program
    {
        static void Main()
        {
            
            int[] nums = new int [100];
            for (int i = 0; i < 100; i++)
            {
                if (i == 0)
                {
                    nums[i] = 100;
                }
                else
                {
                    nums[i] = nums [i - 1] - 3;
                }
            }

            foreach (int num in nums)
            {
                Console.WriteLine(num);
            }
        }
    }
}





2.2

using System;
namespace Addstring
{
    class Program
    {
        static void Main()
        {
            int[] nums = new int[50];
            int a = 1;

            for (int i = 0; i < nums.Length; i++)
            {
                nums[i] = a;
                a += 2;
            }

            foreach (int num in nums)
            {
                Console.WriteLine(num);
            }
        }
    }
}





2.3
using System;


namespace hardMatrix
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Введите размер матрицы: ");
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, n];

            for (int i = 0; i < n; i++)
            {
                matrix[0, i] = 1;
                matrix[i, 0] = 1;
            }

            for (int i = 1; i < n; i++)
            {
                for (int j = 1; j < n; j++)
                {
                    matrix[i, j] = matrix[i - 1, j] + matrix[i, j - 1];
                }
            }

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write(matrix[i, j] + "\t");
                }
                Console.WriteLine();
            }
        }
    }
}





2.4
using System;

class Program
{
    static void Main()
    {
        int[,] temperatures = CreateRandomTemperatures();
        int[] averageTemperatures = CalculateAverageTemperatures(temperatures);

        string[] monthNames = {
            "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", 
            "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"
        };

        Array.Sort(averageTemperatures, monthNames);

        Console.WriteLine("Средние температуры для каждого месяца (отсортированные по возрастанию с комментариями о сезонности):");
        for (int i = 0; i < 12; i++)
        {
            Console.WriteLine($"{monthNames[i]}: {averageTemperatures[i]} °C");
        }
    }

    static int[,] CreateRandomTemperatures()
    {
        Random random = new Random();
        int[,] temperatures = new int[12, 30];

        for (int month = 0; month < 12; month++)
        {
            for (int day = 0; day < 30; day++)
            {
                temperatures[month, day] = random.Next(-20, 35);
            }
        }

        return temperatures;
    }

    static int[] CalculateAverageTemperatures(int[,] temps)
    {
        int[] averageTemps = new int[12];

        for (int month = 0; month < 12; month++)
        {
            int totalTemperature = 0;
            for (int day = 0; day < 30; day++)
            {
                totalTemperature += temps[month, day];
            }
            averageTemps[month] = totalTemperature / 30;
        }

        return averageTemps;
    }
}





2.5
using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        // Создаем двумерный массив temperature размером [12, 30]
        int[,] temperature = new int[12, 30];

        // Генерируем случайные значения температуры
        Random random = new Random();
        for (int month = 0; month < 12; month++)
        {
            for (int day = 0; day < 30; day++)
            {
                temperature[month, day] = random.Next(-10, 30); // Генерируем значения от -10 до 30
            }
        }

        // Вычисляем и выводим среднюю температуру для каждого месяца
        Dictionary<string, List<int>> averageTemperatures = CalculateAverageTemperatures(temperature);

        // Сортируем словарь по возрастанию средних температур
        List<KeyValuePair<string, List<int>>> sortedTemperatures = new List<KeyValuePair<string, List<int>>>(averageTemperatures);
        sortedTemperatures.Sort((x, y) => GetAverageTemperature(x.Value).CompareTo(GetAverageTemperature(y.Value)));

        // Выводим отсортированные средние температуры с подписями месяцев
        foreach (var month in sortedTemperatures)
        {
            Console.WriteLine($"{month.Key}: {GetAverageTemperature(month.Value)} °C");
        }
    }

    static Dictionary<string, List<int>> CalculateAverageTemperatures(int[,] temperature)
    {
        Dictionary<string, List<int>> averageTemperatures = new Dictionary<string, List<int>>();

        for (int month = 0; month < 12; month++)
        {
            List<int> monthTemperatures = new List<int>();

            for (int day = 0; day < 30; day++)
            {
                monthTemperatures.Add(temperature[month, day]);
            }

            averageTemperatures.Add(GetMonthName(month), monthTemperatures);
        }

        return averageTemperatures;
    }

    static int GetAverageTemperature(List<int> temperatures)
    {
        int sum = 0;
        foreach (var temperature in temperatures)
        {
            sum += temperature;
        }

        return (int)sum / temperatures.Count;
    }

    static string GetMonthName(int month)
    {
        return new DateTime(2022, month + 1, 1).ToString("MMMM");
    }
}